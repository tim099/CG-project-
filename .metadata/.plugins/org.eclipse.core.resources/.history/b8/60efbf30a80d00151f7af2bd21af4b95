#ifndef TEXTURE_H_
#define TEXTURE_H_
#include <GL/glew.h>
#include <glm/glm.hpp>
const int TEXTURE_BMP=1;

const int P_NONE=0;
const int P_MipMap=1;
const int P_Linear=2;
const int P_Nearest=3;
class Texture {
public:
	Texture(const char * imagepath,int type=TEXTURE_BMP);
	virtual ~Texture();
	static GLuint loadBMP(const char * imagepath,int Parameteri=P_MipMap);
	static GLuint loadBMP_to_sobel(const char * imagepath,int Parameteri=P_MipMap);
	static void usetexture(GLuint programID,GLuint textureID,int num,const char *name
			,GLenum target=GL_TEXTURE_2D);
	static void usetextureArr(GLuint programID,GLuint* textureArr,int num,int tex_num,const char *name);
	static GLuint gen_texture(const void *pixels,GLsizei width,GLsizei height,GLint internalformat,GLenum format
			,GLenum type=GL_UNSIGNED_BYTE,int Parameteri=P_MipMap);
	static GLuint gen_texture_Arr();
	static GLuint gen_cube_map(GLsizei size,GLint internalformat,GLenum format
			,GLenum type=GL_UNSIGNED_BYTE);
	static void draw_texture(GLuint tex,GLuint shader2D,double winaspect=1.0,double texaspect=1.0,GLfloat alpha=1.0,
			glm::vec3 pos=glm::vec3(0,0,0),double size=1.0);
	GLuint TexBuffer;
protected:
	static GLuint gen_texture_vertex(GLfloat width,GLfloat height,glm::vec3 pos=glm::vec3(0,0,0));
};

#endif /* TEXTURE_H_ */
