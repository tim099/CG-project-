#include "class/shader/Shader.h"

#include <iostream>
#include <glm/glm.hpp>
#include <fstream>
#include <vector>
#include <cstring>

Shader::Shader() {
	programID=0;
}
Shader::~Shader() {
	if(programID)glDeleteProgram(programID);
}
void Shader::EnableNormapping(){
	glUniform1i(glGetUniformLocation(programID,"NormalMappingActive"),1);
}
void Shader::DisableNormapping(){
	glUniform1i(glGetUniformLocation(programID,"NormalMappingActive"),0);
}
void Shader::active_shader(){
	glUseProgram(programID);
}
void Shader::read_shader(std::string &ShaderCode,const char* path){
    std::ifstream ShaderStream(path, std::ios::in);
    if(ShaderStream.is_open()){
        std::string Line ="";
        while(getline(ShaderStream,Line))ShaderCode+="\n"+Line;
        ShaderStream.close();
    }else{
    	std::cout<<"load Shader:"<<path<<"false"<<std::endl;
    }
}
void Shader::compile_shader(GLuint ShaderID,std::string &ShaderCode){
    char const *SourcePointer=ShaderCode.c_str();
    glShaderSource(ShaderID,1,&SourcePointer,NULL);
    glCompileShader(ShaderID);
}
void Shader::check_shader(GLuint ShaderID,GLint &Result,int &InfoLogLength){
    glGetShaderiv(ShaderID,GL_COMPILE_STATUS,&Result);
    glGetShaderiv(ShaderID,GL_INFO_LOG_LENGTH,&InfoLogLength);
    std::vector<char> ShaderErrorMessage(InfoLogLength);
    glGetShaderInfoLog(ShaderID,InfoLogLength, NULL,&ShaderErrorMessage[0]);
    if(strcmp(&ShaderErrorMessage[0],""))fprintf(stdout, "%s\n", &ShaderErrorMessage[0]);
}
void Shader::check_program(GLuint ProgramID,int &InfoLogLength){
    std::vector<char> ProgramErrorMessage(InfoLogLength>1?InfoLogLength:1);
    glGetProgramInfoLog(ProgramID, InfoLogLength, NULL, &ProgramErrorMessage[0]);
    if(strcmp(&ProgramErrorMessage[0],""))fprintf(stdout,"%s\n", &ProgramErrorMessage[0]);
}
GLuint Shader::creat_shader(const char* src,GLenum type){
	GLuint ShaderID=glCreateShader(type);
    std::string ShaderCode;
    read_shader(ShaderCode,src);
    // Compile Shader
    compile_shader(ShaderID,ShaderCode);
    return ShaderID;
}
void Shader::LoadShader(const char* vertex_file_path,const char* fragment_file_path){
    GLuint VertexShaderID=glCreateShader(GL_VERTEX_SHADER);
    GLuint FragmentShaderID=glCreateShader(GL_FRAGMENT_SHADER);

    std::string VertexShaderCode;
    read_shader(VertexShaderCode,vertex_file_path);

    std::string FragmentShaderCode;
    read_shader(FragmentShaderCode,fragment_file_path);

    GLint Result=GL_FALSE;
    int InfoLogLength;
    // Compile Vertex Shader
    compile_shader(VertexShaderID,VertexShaderCode);
    check_shader(VertexShaderID,Result,InfoLogLength);// Check Vertex Shader
    // Compile Fragment Shader
    compile_shader(FragmentShaderID,FragmentShaderCode);
    check_shader(FragmentShaderID,Result,InfoLogLength);

    // Link the program
    GLuint ProgramID=glCreateProgram();
    glAttachShader(ProgramID,VertexShaderID);
    glAttachShader(ProgramID,FragmentShaderID);
    glLinkProgram(ProgramID);

    // Check the program
    glGetProgramiv(ProgramID,GL_LINK_STATUS,&Result);
    glGetProgramiv(ProgramID,GL_INFO_LOG_LENGTH,&InfoLogLength);
    check_program(ProgramID,InfoLogLength);

    glDeleteShader(VertexShaderID);
    glDeleteShader(FragmentShaderID);

    programID=ProgramID;
}
void Shader::LoadShader(const char* vertex,const char* geometry,const char* fragment){
    GLuint VertexShaderID=glCreateShader(GL_VERTEX_SHADER);
    GLuint FragmentShaderID=glCreateShader(GL_FRAGMENT_SHADER);
    GLuint GeometryShaderID=glCreateShader(GL_GEOMETRY_SHADER);

    std::string VertexShaderCode;
    read_shader(VertexShaderCode,vertex);
    std::string FragmentShaderCode;
    read_shader(FragmentShaderCode,fragment);
    std::string GeometryShaderCode;
    read_shader(GeometryShaderCode,geometry);

    GLint Result=GL_FALSE;
    int InfoLogLength;
    // Compile Vertex Shader
    compile_shader(VertexShaderID,VertexShaderCode);
    check_shader(VertexShaderID,Result,InfoLogLength);// Check Vertex Shader
    // Compile Fragment Shader
    compile_shader(FragmentShaderID,FragmentShaderCode);
    check_shader(FragmentShaderID,Result,InfoLogLength);
    // Compile Geometry Shader
    compile_shader(GeometryShaderID,GeometryShaderCode);
    check_shader(GeometryShaderID,Result,InfoLogLength);

    // Link the program
    GLuint ProgramID=glCreateProgram();
    glAttachShader(ProgramID,VertexShaderID);
    glAttachShader(ProgramID,FragmentShaderID);
    glAttachShader(ProgramID,GeometryShaderID);
    glLinkProgram(ProgramID);

    // Check the program
    glGetProgramiv(ProgramID,GL_LINK_STATUS,&Result);
    glGetProgramiv(ProgramID,GL_INFO_LOG_LENGTH,&InfoLogLength);
    check_program(ProgramID,InfoLogLength);

    glDeleteShader(VertexShaderID);
    glDeleteShader(FragmentShaderID);
    glDeleteShader(GeometryShaderID);

    programID=ProgramID;
}
