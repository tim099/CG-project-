#include <class/texture/Image.h>

Image::Image() {
	format=GL_RGB;
	width=0, height=0;
	imageSize=0;   // = width*height*3
	data=0;// Actual RGB data
}
Image::~Image() {
	if(data)delete[] data;
}
Image* Image::loadBMPtoImage(const char * imagepath){
	unsigned char header[54]; // Each BMP file begins by a 54-bytes header
	unsigned int dataPos;     // Position in the file where the actual data begins

	FILE * file = fopen(imagepath,"rb");// Open the file
	if (!file){printf("Image could not be opened:%s\n",imagepath);return 0;}
	if (fread(header,1,54,file)!=54){ // If not 54 bytes read : problem
	    printf("Not a correct BMP file:%s\n",imagepath);
	    return 0;
	}
	if (header[0]!='B'||header[1]!='M'){
	    printf("Not a correct BMP file:%s\n",imagepath);
	    return 0;
	}
	Image* image=new Image();
	dataPos=*(int*)&(header[0x0A]);
	image->imageSize=*(int*)&(header[0x22]);
	image->width=*(int*)&(header[0x12]);
	image->height=*(int*)&(header[0x16]);
	if(image->imageSize==0)image->imageSize=image->width*image->height*3; // 3 : one byte for each Red, Green and Blue component
	if(dataPos==0)dataPos=54; // The BMP header is done that way
	image->data=new unsigned char [image->imageSize];
	fread(image->data,sizeof(char),image->imageSize,file);
	image->format=GL_BGR;
	fclose(file);
	return image;
}
