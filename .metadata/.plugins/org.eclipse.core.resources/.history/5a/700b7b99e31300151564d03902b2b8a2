#include "class/test/Test.h"

//const double CUBE_SIZE=1.0;

std::vector<Model*>models;
std::vector<BufferObject*>b_objs;
std::vector<DrawObject*>d_objs;
LightControl* lightControl;
PointLight *camlight;
PointLight *sunlight;
ParallelLight *s_light;
KeyBoard *keyboard;
Mouse *mouse;
DrawObjectCreater *DOC;

DrawObject* look_at;
DrawObject* base;
DrawObject* sun;
DrawObject* tiger;
DrawObject* stars;
DrawObject* galaxy;
DrawObject* dmaps[50][50];

CubeModel *cube;

std::vector<GLuint>shaders;
TextureMap* texmap;
GLuint cur_shader;
GLuint shaderBasic,shaderNormalMapping,shader2D,shaderShadowMapping;
GLuint shadercubeShadowMapping,shaderTest;
double tiger_ry=0;
double shadow_dis=1.0;
int range=70;
bool map[MX][MY][MZ];
bool stop_the_sun=false;
bool to_sobel=false;
int shader_at=0;


void draw_map(Camera *camera){
    glm::ivec2 min,max,dp_pos(camera->look_at.x,camera->look_at.z);
    if(dp_pos.x<0)dp_pos.x=0;if(dp_pos.y<0)dp_pos.y=0;
    if(dp_pos.x>=MX)dp_pos.x=MX-1;if(dp_pos.y>=MZ)dp_pos.y=MZ-1;
    min=dp_pos-glm::ivec2(range,range);
    max=dp_pos+glm::ivec2(range,range);
    if(min.x<0)min.x=0;if(min.y<0)min.y=0;
    if(max.x>=MX)max.x=MX-1;if(max.y>=MZ)max.y=MZ-1;
    for(int i=min.x/10;i<max.x/10;i++){
    	for(int j=min.y/10;j<max.y/10;j++){
    		dmaps[i][j]->push_temp_position(new Position(glm::vec3(0,0,0),glm::vec3()));
    	}
    }
}
void set_obj_pos(Camera *camera){
	static Position starpos(glm::vec3(0,0,0),glm::vec3());
	static Position sunpos(glm::vec3(5.1,80.6,0.1),glm::vec3());
    //obj move
    tiger_ry+=0.02;
    starpos.r.y+=0.02;
    if(!stop_the_sun)sunlight->pos=glm::vec3(glm::rotate(0.02f,glm::vec3(-1,0,1))*glm::vec4(sunlight->pos,1));
    s_light->vec=-sunlight->pos;
    sunpos.pos=sunlight->pos;
    sun->push_temp_position(new Position(sunpos));
    tiger->push_temp_position(new Position(glm::vec3(33.0,21.47,26.0),glm::vec3(0,tiger_ry,0)));
    //Position* look_at_pos=
    look_at->push_temp_position(new Position(camera->look_at,glm::vec3(0,camera->look_ry(),0)));
    //look_at->push_temp_position(new Position(glm::vec3(0,0,-1),glm::vec3(0,0,0),look_at_pos));
    stars->push_temp_position(new Position(starpos));
    galaxy->push_temp_position(new Position(starpos));
}
void update_map(Camera *camera){
    draw_map(camera);//push position
    camlight->pos=camera->look_at;
    set_obj_pos(camera);
}
void draw_all_objects(FrameBuffer *FBO,Camera *camera,double &time){
	FBO->bind_buffer();
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);//clear buffer
    //sent uniform
    camera->sent_uniform(cur_shader,FBO->aspect());
    lightControl->sent_uniform(cur_shader,camera->pos);
    //start draw
    for(unsigned i=0;i<d_objs.size();i++){
    	d_objs.at(i)->draw_object(cur_shader);//draw all obj
    }
    std::cout<<"range="<<range<<"drawtime="<<(glfwGetTime()-time)<<std::endl;
    time=glfwGetTime();
}
void ParallelLights_shadow_map(GLuint programID,FrameBuffer* SFBO,std::vector<ParallelLight*>&lights
,Camera *camera,glm::mat4 *LVP,double &time){
	for(unsigned n=0;n<lights.size();n++){
		SFBO->bind_depth_texture(n);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);//clear buffer
		double shadow_size=(shadow_dis/sqrt(camera->look_dis()+1.0));

		LVP[n]=lights.at(n)->sent_uniform(programID,SFBO->aspect(),shadow_size,camera->look_at);

	    for(unsigned i=0;i<d_objs.size();i++){
	    	d_objs.at(i)->draw_shadow_map(programID);//draw all obj
	    }
	}
	std::cout<<"range="<<range<<"drawtime="<<(glfwGetTime()-time)<<std::endl;
    time=glfwGetTime();
}
void PointLight_shadow_maps(GLuint programID,FrameBuffer* SFBO,PointLight *light,glm::mat4 PLVP[6]){
	for(int n=0;n<6;n++){
		SFBO->bind_depth_texture(n);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);//clear buffer
		PLVP[n]=light->sent_uniform(programID,SFBO->aspect(),n);
		for(unsigned i=0;i<d_objs.size();i++){
		    d_objs.at(i)->draw_shadow_map(programID);//draw all obj
		}
	}
}
void prepare_draw_obj(){
	Model* m=Model::load_obj("files/obj/tiger.obj",2.0);
	Model* m2=Model::load_obj("files/obj/cube.obj",40.0);
	Model* m3=Model::load_obj("files/obj/ico.obj",0.1);
	Model* m4=Model::load_obj("files/obj/stars.obj",10000.0);
	Model* m5=Model::load_obj("files/obj/celestialSphere.obj",20000.0);
	Model* m6=Model::load_obj("files/obj/cube.obj",60000.0);
	Model* m7=Model::load_obj("files/obj/base.obj",3.0);
	m->mat=glm::vec4(0.1,1.0,0.1,100);
	m2->mat=glm::vec4(0.1,0.1,1.0,50);
	m3->mat=glm::vec4(0.1,0.05,0.1,3);
	m4->mat=glm::vec4(0.4,0.05,1.8,3);
	m5->mat=glm::vec4(0.0,0.0,0.1,3);
	m6->mat=glm::vec4(0.0,0.0,0.5,3);
	models.push_back(m);
	models.push_back(m2);
	models.push_back(m3);
	models.push_back(m4);
	models.push_back(m5);
	models.push_back(m6);
	models.push_back(m7);
    b_objs.push_back(new BufferObject(m));
    b_objs.push_back(new BufferObject(m2));
    b_objs.push_back(new BufferObject(m3));
    b_objs.push_back(new BufferObject(m4));
    b_objs.push_back(new BufferObject(m5));
    b_objs.push_back(new BufferObject(m6));
    b_objs.push_back(new BufferObject(m7));

    creat_cube_obj();
    tiger=new DrawObject(b_objs.at(0),texmap->get_tex(std::string("test")));

    d_objs.push_back(tiger);
    sun=new DrawObject(b_objs.at(1),texmap->get_tex(std::string("test2")));
    sun->draw_shadow=false;
    d_objs.push_back(sun);
    look_at=new DrawObject(b_objs.at(2),texmap->get_tex(std::string("test3")));
    look_at->draw_shadow=false;
    d_objs.push_back(look_at);
    stars=new DrawObject(b_objs.at(3),texmap->get_tex(std::string("test3")));
    stars->draw_shadow=false;
    d_objs.push_back(stars);
    galaxy=new DrawObject(b_objs.at(4),texmap->get_tex(std::string("galaxy")));
    d_objs.push_back(galaxy);
    DrawObject* doge=new DrawObject(b_objs.at(5),texmap->get_tex(std::string("doge")));
    doge->draw_shadow=false;
    d_objs.push_back(doge);
    doge->push_position(new Position(glm::vec3(0,0,0),glm::vec3()));
    base=new DrawObject(b_objs.at(6),texmap->get_tex(std::string("test2")));
    d_objs.push_back(base);
    base->push_position(new Position(glm::vec3(54.0,21.75,26.0),glm::vec3(0,0,0)));

}

int main(){
	Test *test=new Test();
	test->Mainloop();
    return 0;
}
